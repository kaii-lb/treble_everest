From f0d6d6c1685462000ff3c01b38293ab9b2646520 Mon Sep 17 00:00:00 2001
From: "Christopher A. Williamson" <home@chrisaw.com>
Date: Wed, 3 Apr 2024 12:32:53 +0100
Subject: [PATCH 1/1] Revert "BrightnessUtils: Allow maintainer to set desired
 brightness curve impl" and "BrightnessUtils: Conditionally use low gamma
 implementation for brightness curve"

---
 .../settingslib/display/BrightnessUtils.java  | 35 +++----------------
 1 file changed, 5 insertions(+), 30 deletions(-)

diff --git a/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java b/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
index 35f01f67..41a076f8 100644
--- a/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
+++ b/packages/SettingsLib/DisplayUtils/src/com/android/settingslib/display/BrightnessUtils.java
@@ -16,20 +16,13 @@
 
 package com.android.settingslib.display;
 
-import android.os.SystemProperties;
 import android.util.MathUtils;
-import com.android.internal.display.BrightnessSynchronizer;
 
 /** Utility methods for calculating the display brightness. */
-import com.android.internal.display.BrightnessSynchronizer;
-
 public class BrightnessUtils {
 
-    public static final boolean sysUseLowGamma = Boolean.parseBoolean(
-        SystemProperties.get("persist.sys.brightness.low.gamma", "false"));
-
     public static final int GAMMA_SPACE_MIN = 0;
-    public static final int GAMMA_SPACE_MAX = sysUseLowGamma ? 255 : 65535;
+    public static final int GAMMA_SPACE_MAX = 255;
 
     // Hybrid Log Gamma constant values
     private static final float R = 0.5f;
@@ -60,17 +53,8 @@ public class BrightnessUtils {
      * @return The corresponding setting value.
      */
     public static final int convertGammaToLinear(int val, int min, int max) {
-        final float normalizedVal = MathUtils.norm(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, val);
-        final float ret;
-        if (normalizedVal <= R) {
-            ret = MathUtils.sq(normalizedVal / R);
-        } else {
-            ret = MathUtils.exp((normalizedVal - C) / A) + B;
-        }
-
-        // HLG is normalized to the range [0, 12], so we need to re-normalize to the range [0, 1]
-        // in order to derive the correct setting value.
-        return Math.round(MathUtils.lerp(min, max, ret / 12));
+        return MathUtils.constrain(BrightnessSynchronizer.brightnessIntToFloat(val),
+                         min, max);
     }
 
     /**
@@ -134,16 +118,7 @@ public class BrightnessUtils {
      * @return The corresponding slider value
      */
     public static final int convertLinearToGammaFloat(float val, float min, float max) {
-        // For some reason, HLG normalizes to the range [0, 12] rather than [0, 1]
-        final float normalizedVal = MathUtils.norm(min, max, val) * 12;
-        final float ret;
-        if (normalizedVal <= 1f) {
-            ret = MathUtils.sqrt(normalizedVal) * R;
-        } else {
-            ret = A * MathUtils.log(normalizedVal - B) + C;
-        }
-
-        return sysUseLowGamma ? BrightnessSynchronizer.brightnessFloatToInt(
-                       MathUtils.constrain(val, min, max)) : Math.round(MathUtils.lerp(GAMMA_SPACE_MIN, GAMMA_SPACE_MAX, ret));
+        return BrightnessSynchronizer.brightnessFloatToInt(
+                       MathUtils.constrain(val, min, max));
     }
 }
-- 
2.44.0
